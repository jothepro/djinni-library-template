on:
  release:
    types: [released]
  pull_request:

name: Run Unit Tests and build packages for all target platforms

env:
  # Maven credentials for publishing the AAR
  MAVEN_REPOSITORY: https://maven.pkg.github.com/jothepro/djinni-library-template
  MAVEN_USERNAME: jothepro
  MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
  # NuGet credentials for publishing the NuGet package for .NET Core
  NUGET_REPOSITORY: https://nuget.pkg.github.com/jothepro/index.json
  NUGET_USERNAME: jothepro
  NUGET_PASSWORD: ${{ secrets.NUGET_PASSWORD }}
  # Conan credentials for publishing the raw conan artifacts.
  CONAN_REPOSITORY: https://gitlab.com/api/v4/projects/27897297/packages/conan
  CONAN_LOGIN_USERNAME: jothepro
  CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
  SWIFTPACKAGE_GITSERVER: github.com/jothepro
  SWIFTPACKAGE_REPOSITORY: djinni-library-template-swiftpackage
  SWIFTPACKAGE_REPOSITORY_USERNAME: jothepro
  SWIFTPACKAGE_REPOSITORY_PASSWORD: ${{ secrets.REPOSITORY_ACCESS_TOKEN }}

jobs:
  version:
    name: get version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: determine version from latest git tag
        id: git_describe
        run: |
          version_tag=`git describe --tags`
          version=${version_tag:1}
          echo "::set-output name=version::$version"
    outputs:
      version: ${{ steps.git_describe.outputs.version }}
  test:
    name: Build & test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Conan
        uses: turtlebrowser/get-conan@main
      - name: Conan install
        run: conan install -if build .
      - name: Conan build & test
        run: conan build ..
        working-directory: build

  build_android:
    name: Package for Android (AAR)
    runs-on: ubuntu-latest
    needs:
      - test
      - version
    if: github.event_name == 'release'
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Install NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r22b
          add-to-path: false
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: ./build.py --android x86 x86_64 armv7 armv8 --configuration release --package aar
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: publish
        run: ./gradlew publish
        working-directory: lib/platform/android/package/
      - name: set version to Doxyfile
        run: echo "PROJECT_NUMBER = $VERSION" >> Doxyfile-Java
      - name: generate documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: 'Doxyfile-Java'
      - name: Publish generated docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: docs/generated/html/java
          destination_dir: java
          github_token: ${{ secrets.GITHUB_TOKEN }}
          exclude_assets: '.gitignore'

  build_darwin:
    name: Package for Darwin (swiftpackage)
    runs-on: macos-latest
    needs:
      - test
      - version
    if: github.event_name == 'release'
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: ./build.py --macos x86_64 armv8 --iphonesimulator x86_64 armv8 --iphoneos armv8 --package xcframework swiftpackage --configuration release
      - name: publish
        run: |
          GIT_URL=https://$SWIFTPACKAGE_REPOSITORY_USERNAME:$SWIFTPACKAGE_REPOSITORY_PASSWORD@$SWIFTPACKAGE_GITSERVER/$SWIFTPACKAGE_REPOSITORY.git
          git clone --depth 1 $GIT_URL
          rm -r $SWIFTPACKAGE_REPOSITORY/bin/* && cp -r swiftpackage/* $SWIFTPACKAGE_REPOSITORY && cd $SWIFTPACKAGE_REPOSITORY
          git add . && git commit -m "version $VERSION" && git tag $VERSION
          git push && git push --tags
        working-directory: build/
      - name: set version to Doxyfile
        run: echo "PROJECT_NUMBER = $VERSION" >> Doxyfile-ObjC
      - name: generate documenation
        run: |
          brew install doxygen graphviz
          doxygen Doxyfile-ObjC
      - name: Publish generated docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: docs/generated/html/objc
          destination_dir: objc
          github_token: ${{ secrets.GITHUB_TOKEN }}
          exclude_assets: '.gitignore'

  build_windows:
    name: Package for Windows (NuGet)
    runs-on: windows-latest
    needs:
      - test
      - version
    if: github.event_name == 'release'
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: python3 ./build.py --windows x86 x86_64 armv7 armv8 --package nuget --configuration release
      - name: publish
        run: |
          nuget sources add -Name nuget_server -Source $env:NUGET_REPOSITORY -username $env:NUGET_USERNAME -password $env:NUGET_PASSWORD
          nuget push MyDjinniLibrary.$env:VERSION.nupkg -Source nuget_server -ApiKey $env:NUGET_PASSWORD
        working-directory: build/windows/
      - name: set version to Doxyfile
        run: echo "PROJECT_NUMBER = $env:VERSION" | Out-File -FilePath Doxyfile-CppCli -Encoding utf-8 -Append
      - name: generate documentation
        run: |
          choco install doxygen.install --version 1.9.1
          choco install graphviz --version 2.47.3
          refreshenv
          & "C:\Program Files\doxygen\bin\doxygen.exe" Doxyfile-CppCli
      - name: Publish generated docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: docs/generated/html/cppcli
          destination_dir: cppcli
          github_token: ${{ secrets.GITHUB_TOKEN }}
          exclude_assets: '.gitignore'

  build_linux:
    name: Package for Linux (Conan)
    runs-on: ubuntu-latest
    needs:
      - test
      - version
    if: github.event_name == 'release'
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: ./build.py --linux x86 x86_64 armv7 armv8 --package conan --configuration release
      - name: publish
        run: |
          conan remote add conan_repository $CONAN_REPOSITORY
          conan upload my_djinni_library/$VERSION@jothepro/release --all --remote=conan_repository
      - name: set version to Doxyfile
        run: echo "PROJECT_NUMBER = $VERSION" >> Doxyfile-Cpp
      - name: generate documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: 'Doxyfile-Cpp'
      - name: Publish generated docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: docs/generated/html/cpp
          destination_dir: cpp
          github_token: ${{ secrets.GITHUB_TOKEN }}
          exclude_assets: '.gitignore'