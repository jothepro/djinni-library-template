on:
  release:
    types: [released]
  pull_request:

name: Run Unit Tests and build packages for all target platforms

env:
  # Maven credentials for publishing the AAR
  MAVEN_REPOSITORY: https://maven.pkg.github.com/jothepro/djinni-library-template
  MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
  MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
  # NuGet credentials for publishing the NuGet package for .NET Core
  NUGET_REPOSITORY: https://nuget.pkg.github.com/jothepro/index.json
  NUGET_USERNAME: ${{ secrets.NUGET_USERNAME }}
  NUGET_PASSWORD: ${{ secrets.NUGET_PASSWORD }}
  # Conan credentials for publishing the raw conan artifacts.
  CONAN_REPOSITORY: https://artifactory.jothe.pro/artifactory/api/conan/conan-private
  CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
  CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}

jobs:
  test:
    name: Build & test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
          submodules: true
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Conan
        uses: turtlebrowser/get-conan@main
      - name: Conan install
        run: conan install -if build .
      - name: Conan build & test
        run: conan build ..
        working-directory: build

  build_android:
    name: Package for Android (AAR)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
      - name: Store Java 8 Home in variable
        run: echo "JAVA_8_HOME=$(java -XshowSettings:properties -version 2>&1 > /dev/null | sed -n -e 's/^.*java.home = //p')" >> $GITHUB_ENV
      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - name: Store Java 11 Home in variable
        run: echo "JAVA_11_HOME=$(java -XshowSettings:properties -version 2>&1 > /dev/null | sed -n -e 's/^.*java.home = //p')" >> $GITHUB_ENV
      - name: Install NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r22b
          add-to-path: false
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: ./build.py --android x86 x86_64 armv7 armv8 --android-ndk ${ANDROID_NDK_HOME} --java-11-home ${JAVA_11_HOME} --java-8-home ${JAVA_8_HOME} --configuration release --package aar
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: generate documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: 'Doxygen-Java'

  build_darwin:
    name: Package for Darwin (swiftpackage)
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: ./build.py --macos x86_64 armv8 --iphonesimulator x86_64 armv8 --iphoneos armv8 --package xcframework swiftpackage --configuration release
      - name: generate documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: 'Doxygen-ObjC'

  build_windows:
    name: Package for Windows (NuGet)
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: python3 ./build.py --windows x86 x86_64 armv7 armv8 --package nuget --configuration release
      - name: generate documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: 'Doxygen-CppCli'

  build_linux:
    name: Package for Linux (Conan)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python requirements
        run: pip install -r djinni_build/requirements.txt
      - name: configure, build and package
        run: ./build.py --linux x86 x86_64 armv7 armv8 --package conan --configuration release
      - name: generate documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: 'Doxygen-Cpp'